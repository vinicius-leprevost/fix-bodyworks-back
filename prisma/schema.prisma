// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum Type {
  BACK
  CHEST
  LEGS
  SHOULDERS
  ARMS
  ABS
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@map("days")
}

model User {
  id                 String    @id @map("_id")
  role               Role
  doc                String    @unique
  hash               Int       @unique
  gender             String
  weigth             Float?
  height             Float?
  name               String
  email              String    @unique
  birthdate          String
  password           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  workouts           Workout[] @relation(name: "user")
  instructorWorkouts Workout[] @relation(name: "instructor")
  history            History[] @relation(name: "history")
  sets               Set[]

  @@map("users")
}

model Exercise {
  id          String    @id @map("_id")
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  sets        Set[]

  @@map("exercises")
}

model Machine {
  id        String    @id @map("_id")
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  sets      Set[]

  @@map("machines")
}

model Set {
  id         String    @id @map("_id")
  reps       Int
  series     Int
  weight     Int?
  day        Day
  type       Type
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  machine    Machine   @relation(fields: [machineId], references: [id])
  machineId  String
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId String
  workout    Workout?  @relation(fields: [workoutId], references: [id])
  workoutId  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  history    History[]

  @@map("sets")
}

model History {
  id        String   @id @map("_id")
  set       Set      @relation(fields: [setId], references: [id])
  setId     String
  stars     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], name: "history")
  userId    String

  @@map("histories")
}

model Workout {
  id           String   @id @map("_id")
  name         String
  active       Boolean
  sets         Set[]
  user         User     @relation(name: "user", fields: [userId], references: [id])
  userId       String
  instructor   User     @relation(name: "instructor", fields: [instructorId], references: [id])
  instructorId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("workouts")
}
